# -*- mode: snippet -*-
# name: Only One Return Error
# key: ?
# condition: (yas-snippet-go-mode-can-expand-for-error-check-p "?")
# type:command
# --

(when-let* ((plist (yas-snippet-go-mode-get-function-response-name))
            (names (plist-get plist :names))
            (types (plist-get plist :types))
            (node-start (plist-get plist :node-start))
            (node-end (plist-get plist :node-end))
            (line (buffer-substring-no-properties node-start node-end))
            (count (length names))
            (current-function (yas-snippet-go-mode-get-parent-function-return-values (point)))
            (return-type-nodes (plist-get current-function :type-nodes))
            (return-name-indexes (mapcar (lambda (type)
                                           (cl-position type types :test 'string=))
                                         (plist-get current-function :types))))
  (let* ((i -1)
         (return-names (mapcar (lambda (index)
                                 (setq i (+ 1 i))
                                 (or (and index (nth index names))
                                     (yas-snippet-go-mode-get-default-value (nth i return-type-nodes))))
                               return-name-indexes)))
    (goto-char node-start)
    (delete-region node-start node-end)
    (if (length= names 1)
        (yas-expand-snippet
         (format "if ${1:err} := %s; $1 != nil {\n\treturn %s\n}"
                 line
                 (yas-snippet-go-mode-get-response-name-snippet return-names 2)))
      (yas-expand-snippet
       (format "%s := %s\nif $%d != nil {\n\treturn %s\n}"
               (yas-snippet-go-mode-get-response-name-snippet names 1)
               line
               count
               (yas-snippet-go-mode-get-response-name-snippet return-names (+ 1 count))))))))